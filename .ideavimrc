"
"
"	Jo√£o Alexandre de Toledo
"	https://github.com/jalexandretoledo/
"
"
"

"" Text Wrapping
set textwidth=79
set colorcolumn=80
set nowrap
"
"" Search and Substitute
"" set gdefault " use global flag by default in s: commands
set hlsearch " highlight searches
set ignorecase 
set smartcase " don't ignore capitals in searches

"" Tabs
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab

set encoding=utf-8		" encoding :)

set belloff=all         " desativa avisos sonoros


let g:mapleader="\\"

" ===============================================================================
" ideavim plugins
" ===============================================================================
set which-key
set ideajoin
set commentary
set surround



" ===============================================================================
" Key mappings
" ===============================================================================

" kj and KJ exit insert mode
inoremap kj <ESC>			
inoremap KJ <ESC>			

" replace current word with yanked text, discard current word
nnoremap S "_diwP

" replace current word with yanked text, yank current word
nnoremap X diw"0P

" \l   (\ + lower L)
nnoremap <leader>l :match<cr>:nohlsearch<cr>:diffupdate<cr>:syntax sync fromstart<cr><c-l>

" Source: http://vim.wikia.com/wiki/Highlight_current_line
" Highlight the current line and keep it highlighted after the cursor is
" moved; it also sets mark h so you can type 'h to come back to the line;
" enter :match to clear the highlighting
"
nnoremap <silent> <Leader>h mh:execute 'match Search /\%'.line('.').'l/'<CR>

" \d    delete to the black hole register
" source: https://www.reddit.com/r/vim/comments/6fujzj/easier_access_to_the_black_hole_register/dil4kro/
nnoremap <leader>d "_d

" navigate between buffers
" nnoremap ]b :ls <enter>
nnoremap ]p :bp <enter>
nnoremap ]n :bn <enter>
nnoremap ]d :bp\|bd# <enter>
nnoremap ]c :bd % <enter>

""" Reload current buffer (if not modified)
nnoremap ]r :e<CR>G

" Last *viewed* buffer
nnoremap ]v :b#<CR>

" List then choose
nnoremap ]b :ls<CR>:b<Space>

" reselect pasted text
nnoremap gp `[v`]

" \f : fold da tag que inicia na linha atual (XML)
nnoremap <leader>f 0f<lmb*mf'bzf'fj

" ===============================================================================
" Visual
" ===============================================================================


set rnu number			" relative line numbers
set numberwidth=5		" line number alignment -> doesn't work with solarized
set expandtab			" expand tabs into spaces

" I've never needed this backup... after all, we use versioning systems for that :)
set nobackup
set nowritebackup
set noswapfile

"" >>> " Rider IDE Settings
"" >>> 
"" >>> 
"" >>> """ Navigate methods
"" >>> map [[ <Action>(MethodUp)
"" >>> map ]] <Action>(MethodDown)
"" >>> 
"" >>> map ge <Action>(GotoNextError)
"" >>> map gE <Action>(GotoPreviousError)
"" >>> 
"" >>> """ Building, Testing and Debugging
"" >>> nnoremap ,t :action ActivateDebugToolWindow<CR>
"" >>> nnoremap ,f :action ChooseDebugConfiguration<CR>
"" >>> nnoremap ,d :action ContextDebug<CR>
"" >>> nnoremap ,u :action Rerun<CR>
"" >>> nnoremap ,b :action ToggleLineBreakpoint<CR>
"" >>> map <leader>m <Action>(RunAnything)
"" >>> 
"" >>> 
"" >>> """ Debugging
"" >>> let g:WhichKeyDesc_debugging = "<leader>d Debugging"
"" >>> map <leader>dd <Action>(ToggleLineBreakpoint)
"" >>> let g:WhichKeyDesc_debugging_toggle_breakpoint = "<leader>dd Toggle Break Point"
"" >>> map <leader>dt <Action>(ActivateDebugToolWindow)
"" >>> let g:WhichKeyDesc_debugging_tool = "<leader>dt Tool"
"" >>> map <leader>de <Action>(EditBreakpoint)
"" >>> let g:WhichKeyDesc_debugging_edit_breakpoint = "<leader>de Edit Breakpoint"
"" >>> map <leader>ds <Action>(PhpListenDebugAction)
"" >>> let g:WhichKeyDesc_debugging_listen = "<leader>ds Start Listening"
"" >>> map <leader>do <Action>(StepOver)
"" >>> let g:WhichKeyDesc_debugging_step_over = "<leader>do Step Over"
"" >>> map <leader>di <Action>(StepInto)
"" >>> let g:WhichKeyDesc_debugging_step_into = "<leader>di Step Into"
"" >>> map <leader>dr <Action>(EvaluateExpression)
"" >>> let g:WhichKeyDesc_debugging_repl = "<leader>dr Repl (Evaluate)"
"" >>> map <leader>dC <Action>(RunToCursor)
"" >>> let g:WhichKeyDesc_debugging_run_to_cursor = "<leader>dC Run To Cursor"
"" >>> map <leader>dc <Action>(Resume)
"" >>> let g:WhichKeyDesc_debugging_resume = "<leader>dc Resume"
"" >>> map <leader>dm <Action>(XDebugger.MuteBreakpoints)
"" >>> let g:WhichKeyDesc_debugging_mute = "<leader>dm Mute"
"" >>> " map <leader>dc <Action>(ChooseDebugConfiguration)
"" >>> " let g:WhichKeyDesc_debugging_resume = "<leader>dc Debug Configuration"
"" >>> 
"" >>> 
"" >>> 
"" >>> map <leader>lr <Action>(RenameElement)
"" >>> let g:WhichKeyDesc_language_rename = "<leader>lr Rename"
"" >>> map <leader>lc <Action>(ChangeSignature)
"" >>> let g:WhichKeyDesc_language_change_signature = "<leader>lc Change Signature"
"" >>> map <leader>lv <Action>(IntroduceVariable)
"" >>> let g:WhichKeyDesc_language_introduce_variable = "<leader>lv Introduce Variable"
"" >>> map <leader>li <Action>(Inline)
"" >>> let g:WhichKeyDesc_language_inline = "<leader>li Inline"
"" >>> map <leader>lf <Action>(ReformatCode)<Action>(SilentCodeCleanup)
"" >>> let g:WhichKeyDesc_language_reformat = "<leader>lf Format"
"" >>> 
"" >>> 
"" >>> """ Run
"" >>> let g:WhichKeyDesc_run = "<leader>r Run"
"" >>> map <leader>rn <Action>(RunClass)
"" >>> let g:WhichKeyDesc_run_class = "<leader>rn Run Class"
"" >>> map <leader>rc <Action>(ChooseRunConfiguration)
"" >>> let g:WhichKeyDesc_run_choose_configuration = "<leader>rc Run Configuration"
"" >>> map <leader>rs <Action>(Stop)
"" >>> let g:WhichKeyDesc_run_stop = "<leader>rs Stop"
"" >>> map <leader>rr <Action>(Rerun)
"" >>> let g:WhichKeyDesc_run_rerun = "<leader>rr Rerun"
"" >>> map <leader>rd <Action>(DebugClass)
"" >>> let g:WhichKeyDesc_run_debug = "<leader>rd Debug Nearest"
"" >>> map <leader>rh <Action>(ImportTests)
"" >>> let g:WhichKeyDesc_run_import_tests = "<leader>rh Test History"
"" >>> map <leader>rm <Action>(RunMenu)
"" >>> let g:WhichKeyDesc_run_menu = "<leader>rm Menu"
"" >>> map <leader>rf <Action>(RerunFailedTests)
"" >>> let g:WhichKeyDesc_run_failed = "<leader>rf Rerun Failed"
"" >>> map <leader>rt <Action>(ActivateRunToolWindow)
"" >>> let g:WhichKeyDesc_run_tool = "<leader>rf Tool"
"" >>> map <leader>ra <Action>(RunAnything)
"" >>> let g:WhichKeyDesc_run_tool = "<leader>ra Run Anything..."
"" >>> 
"" >>> 
"" >>> 
"" >>> """ Tool Windows
"" >>> let g:WhichKeyDesc_tools = "<leader>t Tools"
"" >>> map <leader>tm <Action>(ToolWindowsGroup)
"" >>> let g:WhichKeyDesc_tools_menu = "<leader>tm Menu"
"" >>> map <leader>tb <Action>(ActivateBookmarksToolWindow)
"" >>> let g:WhichKeyDesc_tools_bookmarks = "<leader>tb Bookmark Tool"
"" >>> map <leader>tr <Action>(ActivateRunToolWindow)
"" >>> let g:WhichKeyDesc_tools_run = "<leader>tr Run"
"" >>> map <leader>tf <Action>(ActivateFindToolWindow)
"" >>> let g:WhichKeyDesc_tools_find = "<leader>tf Find"
"" >>> map <leader>tc <Action>(ActivateCommitToolWindow)
"" >>> let g:WhichKeyDesc_tools_commit = "<leader>tc Commit"
"" >>> map <leader>td <Action>(ActivateDebugToolWindow)
"" >>> let g:WhichKeyDesc_tools_debug = "<leader>td Debug"
"" >>> map <leader>tg <Action>(ActivateVersionControlToolWindow)
"" >>> let g:WhichKeyDesc_tools_git = "<leader>tg Git"
"" >>> map <leader>tp <Action>(ActivateProblemsViewToolWindow)
"" >>> let g:WhichKeyDesc_tools_problems = "<leader>tp Problems"
"" >>> map <leader>tT <Action>(ActivateTODOToolWindow)
"" >>> let g:WhichKeyDesc_tools_todos = "<leader>tT Todo's"
"" >>> map <leader>tt <Action>(ActivateTerminalToolWindow)
"" >>> let g:WhichKeyDesc_tools_terminal = "<leader>tt Terminal"
"" >>> map <leader>tj <Action>(JsonPathEvaluateAction)
"" >>> let g:WhichKeyDesc_tools_json_path = "<leader>tj Json Path Eval"
"" >>> 
"" >>> 
"" >>> 
"" >>> """ Niceties
"" >>> map <leader>' <Action>(JumpToLastWindow)
"" >>> let g:WhichKeyDesc_jump_to_last = "<leader>; Last Window"
"" >>> map <leader>; <Action>(HideAllWindows)
"" >>> let g:WhichKeyDesc_hide_all_windows = "<leader>; Hide All"
"" >>> map <leader>q <Action>(CloseContent)
"" >>> let g:WhichKeyDesc_close = "<leader>q Close Window"
"" >>> map <leader>w <Action>(SaveAll)
"" >>> let g:WhichKeyDesc_save_all = "<leader>w Save All"
"" >>> map <leader>e <Action>(ActivateProjectToolWindow)
"" >>> let g:WhichKeyDesc_explorer = "<leader>e Explorer"
"" >>> map <C-z> <Action>(ToggleDistractionFreeMode)
"" >>> let g:WhichKeyDesc_distraction_free = "<C-z> Toggle Distraction Free Mode"
"" >>> map <leader>a <Action>(ShowIntentionActions)
"" >>> let g:WhichKeyDesc_actions = "<leader>a Show Intentions"
"" >>> map <leader>E <Action>(EditSource)
"" >>> let g:WhichKeyDesc_edit_source = "<leader>E Edit Source"
"" >>> 
"" >>> map <leader>h :noh<CR>
"" >>> let g:WhichKeyDesc_no_highlight = "<leader>h No Highlight"





" =============================================================================
" Mostra "actions" da IDE executados para que possam ser mapeados
" =============================================================================
" set trackactionids

" =============================================================================
" jtoledo, 2024-02-20
" =============================================================================
map <c-\>a <Action>(RiderUnitTestRunSolutionAction)
map <c-\>s <Action>(RiderUnitTestFocusExplorerAction)
map <c-\>f <Action>(RiderUnitTestSessionRerunFailedTestsAction)

map <c-\>r <Action>(RenameElement)

map <c-\>v <Action(SelectIn)
